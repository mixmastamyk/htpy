{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"htpy - HTML in Python","text":"<p><code>htpy</code> is a small library that helps you write HTML directly in Python, without a template language:</p> <pre><code>&gt;&gt;&gt; from htpy import html, head, title, body, h1\n&gt;&gt;&gt; print(html[head[title[\"Hello htpy\"]], body[\"hi!\"]])\n&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello htpy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hi!&lt;/body&gt;&lt;/html&gt;\n</code></pre>"},{"location":"#motivation","title":"Motivation","text":"<p>Using Python to generate HTML leads to some benefits compared to template languages:</p> <ul> <li>Use static type checking for your HTML generation.</li> <li>Your regular tools/editor with \"goto definition\" works.</li> <li>Use black for formatting.</li> <li>There is no need to learn another (templating) library.</li> <li>Debugging templates becomes easier since you can debug htpy markup just like to debug regular python code.</li> </ul>"},{"location":"#features","title":"Features","text":"<p>htpy has some features that helps writing HTML:</p> <ul> <li>All strings are escaped by default</li> <li>Integrates with Django/jinja2 templates/markup to allow integration in existing projects</li> <li><code>htpy</code> code works fine with type annotations</li> <li>The <code>html</code> element will include a proper doctype automatically</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#elements","title":"Elements","text":"<p>Elements are imported directly from the <code>htpy</code> module as their name:</p> <pre><code>&gt;&gt;&gt; from htpy import div\n&gt;&gt; print(div)\n&lt;div&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#attributes","title":"Attributes","text":"<p>HTML attributes are defined by calling the element. They can be specified in a couple of different ways.</p>"},{"location":"#keyword-arguments","title":"Keyword arguments","text":"<p>Attributes can be specified via keyword arguments:</p> <pre><code>&gt;&gt;&gt; from htpy import img\n&gt;&gt;&gt; print(img(src=\"picture.jpg\"))\n&lt;img src=\"picture.jpg\"&gt;\n</code></pre> <p>In Python, <code>class</code> and <code>for</code> cannot be used as keyword arguments. Instead, they can be specified as <code>class_</code> or <code>for_</code> when using keyword arguments:</p> <pre><code>&gt;&gt;&gt; from htpy import img\n&gt;&gt;&gt; print(label(for_=\"myfield\"))\n&lt;label for=\"myfield\"&gt;&lt;/label&gt;\n</code></pre>"},{"location":"#idclass-shorthand","title":"id/class shorthand","text":"<p>Using <code>id</code> and <code>class</code> attributes is a very common task. A shorthand that looks like a CSS selector can be used:</p> Setting an id<pre><code>&gt;&gt;&gt; from htpy import div\n&gt;&gt;&gt; print(div(\"#myid\"))\n&lt;div id=\"myid\"&gt;&lt;/div&gt;\n</code></pre> Setting classes<pre><code>&gt;&gt;&gt; from htpy import div\n&gt;&gt;&gt; print(div(\".foo.bar\"))\n&lt;div id=\"foo bar\"&gt;&lt;/div&gt;\n</code></pre> Combining both id and classes<pre><code>&gt;&gt;&gt; from htpy import div\n&gt;&gt;&gt; print(div(\"#myid.foo.bar\"))\n&lt;div id=\"myid\" class=\"foo bar\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#dictionary-attribute","title":"Dictionary attribute","text":"<p>Attributes can also be specified by a dictionary. This is useful when using attributes that are reserved Python keywords (like <code>for</code> or <code>class</code>), when the attribute name contains a dash (<code>-</code>) or when you want to define attributes dynamically.</p> Using an attribute with a dash<pre><code>&gt;&gt;&gt; from htpy import div\n&gt;&gt;&gt; print(div({\"data-foo\": \"bar\"}))\n&lt;div data-foo=\"bar\"&gt;&lt;/div&gt;\n</code></pre> Using an attribute with a reserved keyword<pre><code>&gt;&gt;&gt; from htpy import label\n&gt;&gt;&gt; print(label({\"for\": \"myfield\"}))\n&lt;label for=\"myfield\"&gt;&lt;/label&gt;\n</code></pre>"},{"location":"#boolean-attributes","title":"Boolean attributes","text":"<p>In HTML, boolean attributes are considered \"true\" when they exists or otherwise \"false\". Python bool <code>True</code> and <code>False</code> will make an attribute behave like this:</p> True bool attribute<pre><code>&gt;&gt;&gt; from htpy import button\n&gt;&gt;&gt; print(button(disabled=True))\n&lt;button disabled&gt;&lt;/button&gt;\n</code></pre> False bool attribute<pre><code>&gt;&gt;&gt; from htpy import button\n&gt;&gt;&gt; print(button(disabled=False))\n&lt;button&gt;&lt;/button&gt;\n</code></pre>"},{"location":"#combining-modes","title":"Combining modes","text":"<p>Attributes via id/class shorthand, keyword arguments and dictionary can be combined:</p> Specifying attribute via multiple arguments<pre><code>&gt;&gt;&gt; from htyp import label\n&gt;&gt;&gt; print(label(\"#myid.foo.bar\", {'for': \"somefield\"}, name=\"myname\",))\n&lt;label id=\"myid\" class=\"foo bar\" for=\"somefield\" name=\"myname\"&gt;&lt;/label&gt;\n</code></pre>"},{"location":"#child-elements","title":"Child elements","text":"<p>HTML child elements are specified using the <code>[]</code> syntax. Children can be strings, markup, other elements or lists/iterators.</p> Using a string as children<pre><code>&gt;&gt;&gt; from htpy import h1\n&gt;&gt;&gt; print(h1[\"Welcome to my site!\"])\n&lt;h1&gt;Welcome to my site!&lt;/h1&gt;\n</code></pre> <p>Elements can be arbitrarily nested: Nested elements<pre><code>&gt;&gt;&gt; from htpy import article, section, p\n&gt;&gt;&gt; print(section[article[p[\"Lorem ipsum\"]]])\n&lt;section&gt;&lt;article&gt;&lt;p&gt;Lorem ipsum&lt;/p&gt;&lt;/article&gt;&lt;/section&gt;\n</code></pre></p>"},{"location":"#loopsiterating-over-children","title":"Loops/iterating over children","text":"<p>You can pass an list, tuple or generator to generate multiple children:</p> Iterate over a generator<pre><code>&gt;&gt;&gt; from htpy import ul, li\n&gt;&gt;&gt; print(ul[(li[letter] for letter in \"abc\")])\n&lt;ul&gt;&lt;li&gt;a&lt;/li&gt;&lt;li&gt;b&lt;/li&gt;&lt;li&gt;c&lt;/li&gt;&lt;/ul&gt;\n</code></pre>"},{"location":"#conditional-rendering","title":"Conditional rendering","text":"<p><code>None</code> and <code>False</code> will not render a element. This can be useful to conditionally render some content.</p> Conditional rendering<pre><code>&gt;&gt;&gt; from htpy import div, b\n&gt;&gt;&gt; error = None\n\n&gt;&gt;&gt; # No &lt;b&gt; tag will be rendered since error is none\n&gt;&gt;&gt; print(div[error and b[error]])\n&lt;div&gt;&lt;/div&gt;\n\n&gt;&gt;&gt; error = 'Enter a valid email address.'\n&gt;&gt;&gt; print(div[error and b[error]])\n&lt;div&gt;&lt;b&gt;Enter a valid email address.&lt;/b&gt;&lt;/div&gt;\n\n# Inline if/else can also be used:\n&gt;&gt;&gt; print(div[b[error] if error else None])\n&lt;div&gt;&lt;b&gt;Enter a valid email address.&lt;/b&gt;&lt;/div&gt;\n</code></pre>"}]}